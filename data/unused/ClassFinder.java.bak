//: util/ClassFinder.java

// FIXME: path resolution won't work on Windows.

package pokepon.util;

import static pokepon.util.MessageManager.*;
import java.util.*;
import java.io.*;
import java.net.URL;

/** Utility class (found on the internet) used to scan all classes
 * within a package.
 *
 * @author sp00m (stackoverflow.com), Giacomo Parolini
 */
public final class ClassFinder {

	private final static char DOT = '.';
	private final static char SLASH = '/';
	private final static char BACKSLASH = '\\';
	private final static char SEP;
	static {
		//if(System.getProperty("os.name").startsWith("Windows")) SEP = BACKSLASH;
		/*else*/ SEP = SLASH;
	}
	private final static String CLASS_SUFFIX = ".class";
	private final static String BAD_PACKAGE_ERROR = "Unable to get resources from path '%s'. Are you sure the given '%s' package exists?";

	/** This function returns a List of all found classes that extend baseClass found in directory path.
	 * @param path The path where to search (relative to the java classpath)
	 *@author Giacomo Parolini
	 */
	public static List<Class<?>> findSubclasses(String path,String baseClass) {
		List<Class<?>> classes = new ArrayList<Class<?>>();
		try {
			/* this returns an Enumeration<URL> of found resources in rootdir/path/ */
			if(Debug.pedantic) printDebug("findSubClasses - path="+path);
			java.util.Enumeration<URL> en = Thread.currentThread().getContextClassLoader().getResources(path);

			if(Debug.pedantic) printDebug("en.hasMoreElements() = "+en.hasMoreElements());
			/* for every element in the enumeration convert URL into file to call File method listFiles, that shows all
			 * files in that directory
			 */
			while(en.hasMoreElements()) {
				File[] filelist = new File(en.nextElement().getFile()).listFiles();
				if(filelist == null) {
					if(Debug.on) printDebug("Error: no files found in "+path);
					return classes;
				}
				Arrays.sort(filelist);
				for(File f : new LinkedHashSet<File>(Arrays.asList(filelist))) {
					if(Debug.pedantic) printDebug("file: "+f.getName());
					if(!f.toString().endsWith(".class") || f.toString().matches(".*\\$.+\\.class$")) continue;
					try {
						// FIXME ?
						String classname = f.toString().split("[^a-zA-Z0-9\\.]")[f.toString().split("[^a-zA-Z0-9\\.]").length-1].split("\\.")[0];
						if(Debug.pedantic) printDebug("findSubClasses: classname="+classname);

						/* Get only subclasses of baseClass (exclude baseClass itself) */
						if(Class.forName(baseClass).isAssignableFrom(Class.forName(path.replace(SEP,'.')+"."+classname)) && ! Class.forName(path.replace(SEP,'.')+"."+classname).equals(Class.forName(baseClass))) {
							if(Debug.pedantic) printDebug("classname ok: "+f.toString());
							try { 
								classes.add(Class.forName(path.replace(SEP,'.')+"."+classname));
							} catch(Exception e) {
								printDebug("Caught exception: "+e);
							}
						}

					} catch(ArrayIndexOutOfBoundsException|ClassNotFoundException ee) {
						printDebug("Caught exception in ClassFinder::findSubClasses("+path+","+baseClass+"): "+ ee);
						ee.printStackTrace();
					}
				}
			}
			
		} catch(Exception e){
			printDebug("Caught an exception: "+e);
			e.printStackTrace();
		}

		return classes;
	}

	/** This function is analogous to findSubClasses, but returns a List of Strings with classes simple names */
	public static List<String> findSubclassesNames(String path,String baseClass) {
		List<String> list = new ArrayList<String>();
		for(Class<?> c : findSubclasses(path,baseClass)) {
			list.add(c.getSimpleName());
		}
		return list;
	}

	/** This function returns a List of all classes within a package.
	 * @author sp00m 
	 */
	/*public static List<Class<?>> find(final String scannedPackage) {
		final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
		final String scannedPath = scannedPackage.replace(DOT, SLASH);
		final Enumeration<URL> resources;
		try {
			resources = classLoader.getResources(scannedPath);
		} catch (IOException e) {
			throw new IllegalArgumentException(String.format(BAD_PACKAGE_ERROR, scannedPath, scannedPackage), e);
		}
		final List<Class<?>> classes = new LinkedList<Class<?>>();
		while (resources.hasMoreElements()) {
			final File file = new File(resources.nextElement().getFile());
			classes.addAll(find(file, new String()));
		}
		return classes;
	}*/

	/** @author sp00m */
/*	public static List<Class<?>> find(final File file, final String scannedPackage) {
		final List<Class<?>> classes = new LinkedList<Class<?>>();
		final String resource = scannedPackage + DOT + file.getName();
		if (file.isDirectory()) {
			for (File nestedFile : file.listFiles()) {
				classes.addAll(find(nestedFile, resource));
			}
		} else if (resource.endsWith(CLASS_SUFFIX)) {
			final int beginIndex = 1;
			final int endIndex = resource.length() - CLASS_SUFFIX.length();
			final String className = resource.substring(beginIndex, endIndex);
			try {
				classes.add(Class.forName(className));
			} catch (ClassNotFoundException ignore) {}
		}
		return classes;
	}*/

}
