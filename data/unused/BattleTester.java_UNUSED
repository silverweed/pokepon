//: battle/BattleTester.java

package pokepon.battle;

import pokepon.pony.*;
import pokepon.player.*;
import pokepon.move.*;
import static pokepon.util.MessageManager.*;
import pokepon.util.*;
import java.util.*;

/** A 'toy battle' simulator (currently not working)
 *
 * @author silverweed
 */

public class BattleTester extends BattleTurn {

	public BattleTester(Player p1,Player p2,WeatherHolder w) {
		super(p1,p2,w);
		printMsg("------------- STARTING BATTLE TEST -------------");
		printMsg("Team1: "+p1.getTeam());
		printMsg("Team2: "+p2.getTeam());
		printMsg("");
		engine = new BattleEngine(p1.getTeam(),p2.getTeam());
	}

	private Random rng = new Random();
	
	@Override
	public int performTurn() throws NoActivePonyException {
		try {
			// Turn start preparations
			// -------------------------
			Pony pony1 = team1.getActivePony();
			Pony pony2 = team2.getActivePony();

			pony1.inBattle = true;
			pony2.inBattle = true;

			if(Debug.pedantic) {
				printDebug("[BT] PONY1: "+pony1.hashCode());
				printDebug("[BT] PONY2: "+pony2.hashCode());
			}

			// Move selection
			// ---------------
			int[] selectedMoves = selectMove(pony1,pony2,rng);
			Move move1 = null; 
			Move move2 = null;
			if(pony1.isLockedOnMove()) {
				if(Debug.on) printDebug(pony1.getNickname()+" is blocked on "+pony1.getLastMoveUsed());
				move1 = pony1.getLastMoveUsed();
			} else {
				move1 = (selectedMoves[0] == -1 ? MoveCreator.create("Struggle",pony1) : pony1.getMove(selectedMoves[0]));
			}
			if(pony2.isLockedOnMove()) {
				if(Debug.on) printDebug(pony2.getNickname()+" is blocked on "+pony2.getLastMoveUsed());
				move2 = pony2.getLastMoveUsed();
			} else {
				move2 = (selectedMoves[1] == -1 ? MoveCreator.create("Struggle",pony2) : pony2.getMove(selectedMoves[1]));
			}
		
			// Set Priority 
			// ---------------
			boolean p1First = choosePriority(move1,move2,pony1.speed(),pony2.speed());
			
			// Move usage
			// ---------------
			if(move1.getPP() < 1) move1 = new Struggle(pony1);
			if(move2.getPP() < 1) move2 = new Struggle(pony2);

			if(p1First) {
				engine.setAttacker(1);
				engine.ponyUseMove(move1);
			} else {
				engine.setAttacker(2);
				engine.ponyUseMove(move2);
			}
			
			// Half-turn checks
			// --------------------
			if(checkWinner() != 0) return checkWinner();
		
			if(Debug.on) {
				printDebug("[BT] Pony1: "+pony1.getHp()+"\n[BT] Pony2: "+pony2.getHp());
			}

			boolean switched = false;
			
			if(pony1.isKO()) {
				if(Debug.on) printDebug("[BT] Pony1 ("+pony1.getNickname()+") fainted. Switching...");
				pony1 = switchPony(player1);
				switched = true;
			}
			if(pony2.isKO()) {
				if(Debug.on) printDebug("[BT] Pony2 ("+pony2.getNickname()+") fainted. Switching...");
				pony2 = switchPony(player2);
				switched = true;
			}
			
			if(pony1 == null || pony2 == null) throw new NoActivePonyException();
		
			if(switched) {
				++turnCounter;
				printBattleStatus(pony1,pony2);
				return 0;
			}

			// Start second half-turn: swap attacker and defender
			// ---------------------------------------------------
			engine.swapSides();

			// Second-half turn move usage
			// ----------------------------
			if(p1First) {
				engine.ponyUseMove(move2);
			} else {
				engine.ponyUseMove(move1);
			}
			
			// Turn end checks
			// -----------------
			if(pony1.isDeathScheduled()) {
				if(pony1.deathCounter == 0) {
					printMsg(pony1.getNickname()+" fainted!");
				} else {
					printMsg(pony1.getNickname()+" will faint in "+pony1.deathCounter+" turns!");
					--pony1.deathCounter;
				}
			}
			if(pony2.isDeathScheduled()) {
				printMsg(pony2.getNickname()+" will faint in "+pony2.deathCounter+" turns!");
				if(pony2.deathCounter == 0) {
					printMsg(pony2.getNickname()+" fainted!");
				} else {
					--pony2.deathCounter;
				}
			}

			if(checkWinner() != 0) return checkWinner();

			if(pony1.isKO()) pony1 = switchPony(player1);
			if(pony2.isKO()) pony2 = switchPony(player2);
			if(pony1 == null || pony2 == null) throw new NoActivePonyException();
			
			++turnCounter;
			printBattleStatus(pony1,pony2);
			
			return checkWinner();

		} catch(ReflectiveOperationException e) {
			e.printStackTrace();
		}
		return 0;
	}

	private int status1 = 0;
	private int status2 = 0;

	/** Simple algorithm to select a 'good' move to use (very very raw) */
	private int[] selectMove(Pony p1,Pony p2,Random rng) {
		
		int move1 = 0;
		int move2 = 0;

		if(p1.finishedPP() || p1.getMoves().size() == 0) move1 = -1;
		if(p2.finishedPP() || p2.getMoves().size() == 0) move2 = -1;

		if(move1 != -1)
			rng.nextInt(p1.getMoves().size());
		if(move2 != -1)
			rng.nextInt(p2.getMoves().size());
		
		if(Debug.pedantic) 
			printDebug("selectMove: initially selected { "+(move1 == -1 ? "Struggle" : p1.getMove(move1))+","+(move2 == -1 ? "Struggle" : p2.getMove(move2))+" }");

		// Try to select most effective moves
		if(move1 != -1) {
			outer:
			for(int i = 0; i < p1.getMoves().size(); ++i) {
				if(p1.getMove(i).getPP() == 0) continue;
				// if possible, setup hazard if none is present.
				if(p1.getMove(i).getHazard() != null && engine.getHazards(2).isEmpty()) {
					move1 = i;
					if(Debug.pedantic) printDebug("Move1 changed to "+p1.getMove(i));
					break;
				}
				if(TypeDealer.getEffectiveness(p1.getMove(i).getType(),p2.getTypes()) 
					> TypeDealer.getEffectiveness(p1.getMove(move1).getType(),p2.getTypes())
				) {
					//if possible, don't use status moves more than 3 times in a row 
					//or if hp are low (unless it is a healing move).
					if(status1 >= 3 || (p1.hp() < 0.4 * p1.maxhp() && p1.getMove(i).healUser() == 0)) {
						for(Move m : p1.getMoves()) {
							if(m.equals(p1.getMove(i))) continue;
							if(m.getMoveType() == Move.MoveType.STATUS) continue;
							if(m.getPP() > 0) {
								move1 = p1.getMoves().indexOf(m);
								break outer;
							}
						}
					}
					if(p1.getMove(i).getMoveType() == Move.MoveType.STATUS) ++status1;
					else status1 = 0;
					move1 = i;
					if(Debug.pedantic) printDebug("Move1 changed to "+p1.getMove(i));
				}
			}
		}
		if(move2 != -1) {
			outer2:
			for(int i = 0; i < p2.getMoves().size(); ++i) {
				if(p2.getMove(i).getPP() == 0) continue;
				if(p2.getMove(i).getHazard() != null && engine.getHazards(1).isEmpty()) {
					move2 = i;
					if(Debug.pedantic) printDebug("Move1 changed to "+p2.getMove(i));
					break;
				}
				if(TypeDealer.getEffectiveness(p2.getMove(i).getType(),p1.getTypes()) 
					> TypeDealer.getEffectiveness(p2.getMove(move2).getType(),p1.getTypes()) 
					&& status2 < 3
				) {
					if(status2 >= 3 || (p2.hp() < 0.4 * p2.maxhp() && p2.getMove(i).healUser() == 0)) {
						for(Move m : p2.getMoves()) {
							if(m.equals(p2.getMove(i))) continue;
							if(m.getMoveType() == Move.MoveType.STATUS) continue;
							if(m.getPP() > 0) {
								move2 = p2.getMoves().indexOf(m);
								break outer2;
							}
						}
					}
					if(p2.getMove(i).getMoveType() == Move.MoveType.STATUS) ++status2;
					else status2 = 0;
					move2 = i;
					if(Debug.pedantic) printDebug("Move2 changed to "+p2.getMove(i));
				}
			}
		}
		
		if(Debug.on) printDebug("Moves chosen: {"+move1+","+move2+"}");

		return new int[] { move1,move2 };
	}

	/** @return True if p1 goes first. */
	private boolean choosePriority(Move m1,Move m2,int s1,int s2) {
		if(m1.getPriority() == m2.getPriority()) {
			if(s1 > s2) return true;
			else if(s1 < s2) return false;
			else return (new Random()).nextFloat() > 0.5f;
		}
		else return m1.getPriority() > m2.getPriority();
	}

	private Pony switchPony(Player p) {
		if(p.getTeam().allKO()) return null;
		
		while(!p.switchPony(rng.nextInt(p.getTeam().members()),engine)) {}
		printDebug("New active pony: "+p.getTeam().getActivePony());
		printDebug("Moves: "+p.getTeam().getActivePony().getMoves());
		return p.getTeam().getActivePony();
	}

	private void printBattleStatus(Pony p1,Pony p2) {
		printMsg("------------------\n" +
			"Turn: "+turnCounter+"\n"+
			p1.getNickname()+": "+p1.getHp()+"\n"+
			p2.getNickname()+": "+p2.getHp()+"\n"+
			"Weather: "+weather+"\n"+
			"--------------------");
	}
}



